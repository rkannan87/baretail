sequenceDiagram
    participant Client as Client Application
    participant LB as Load Balancer
    participant D&D as D&D System
    participant BOB as BOB Service<br/>(Clustered)
    participant BBPOB as BBPOB Service<br/>(Clustered)
    participant Cache as Redis Cache
    participant Queue as Message Queue<br/>(Async Processing)
    participant BlobStore as Blob Storage<br/>(High Throughput)
    participant SS as SS (Final Storage)
    participant CDN as CDN<br/>(Content Delivery)
    participant Monitor as Monitoring<br/>(Metrics/Health)

    Note over Client, Monitor: PERFORMANCE OPTIMIZED FLOW

    Client->>LB: Upload Document (with size check)
    LB->>LB: Route based on load & document type
    
    alt Large Document (>10MB) - Optimized Path
        LB->>BOB: Route to available instance
        BOB->>Cache: Check if document exists (dedup)
        Cache-->>BOB: Cache miss
        
        par Parallel Processing
            BOB->>BlobStore: Stream upload (chunked)
            and BOB->>Queue: Queue metadata processing
            and BOB->>Monitor: Log upload metrics
        end
        
        BlobStore-->>BOB: Upload complete + checksum
        BOB->>Cache: Store document reference + metadata
        
        Queue->>BOB: Process metadata (async)
        BOB->>SS: Bulk transfer with optimized metadata
        BOB->>CDN: Cache frequently accessed docs
        BOB->>D&D: Return reference (non-blocking)
        D&D->>Client: Immediate confirmation
        
        Note over BOB, SS: Background: Cleanup blob storage<br/>after SS confirmation
    
    else Small Document (<10MB) - Direct Path
        LB->>BBPOB: Route to available instance
        BBPOB->>Cache: Check cache for similar requests
        alt Cache Hit
            Cache-->>BBPOB: Return cached result
            BBPOB->>Client: Immediate response
        else Cache Miss
            BBPOB->>SS: Direct upload with metadata
            SS-->>BBPOB: Storage confirmation
            BBPOB->>Cache: Cache result for reuse
            BBPOB->>Client: Response
        end
    end

    Note over Client, Monitor: PERFORMANCE OPTIMIZATIONS

    rect rgb(240, 255, 240)
        Note over Client, Monitor: 1. UPLOAD OPTIMIZATIONS
        Note over BlobStore: • Chunked/streaming uploads<br/>• Parallel chunk processing<br/>• Resume capability for failures<br/>• Compression for text documents
    end

    rect rgb(240, 240, 255)
        Note over Client, Monitor: 2. CACHING STRATEGY
        Note over Cache: • Document deduplication<br/>• Metadata caching<br/>• Frequent access patterns<br/>• Smart cache invalidation
    end

    rect rgb(255, 240, 240)
        Note over Client, Monitor: 3. ASYNC PROCESSING
        Note over Queue: • Non-blocking uploads<br/>• Batch metadata processing<br/>• Background cleanup tasks<br/>• Retry mechanisms
    end

    rect rgb(255, 255, 240)
        Note over Client, Monitor: 4. STORAGE OPTIMIZATION
        Note over SS: • Bulk transfers<br/>• Optimized metadata format<br/>• Compression at rest<br/>• Tiered storage (hot/cold)
    end

    rect rgb(245, 240, 255)
        Note over Client, Monitor: 5. MONITORING & SCALING
        Note over Monitor: • Real-time performance metrics<br/>• Auto-scaling triggers<br/>• Health checks<br/>• Bottleneck detection
    end

    Note over Client, Monitor: PERFORMANCE METRICS TO TRACK
    Note over Monitor: • Upload throughput (MB/s)<br/>• Processing latency (p95, p99)<br/>• Cache hit rates<br/>• Queue depth<br/>• Storage I/O patterns<br/>• Error rates & retries
